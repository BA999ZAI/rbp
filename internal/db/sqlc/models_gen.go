// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package sqlc

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/shopspring/decimal"
)

type OrderStatus string

const (
	OrderStatusNew        OrderStatus = "new"
	OrderStatusProcessing OrderStatus = "processing"
	OrderStatusCompleted  OrderStatus = "completed"
	OrderStatusCanceled   OrderStatus = "canceled"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"order_status"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type Archive struct {
	ID        int32      `json:"id"`
	UserID    int32      `json:"user_id"`
	ProductID int32      `json:"product_id"`
	CreatedAt *time.Time `json:"created_at"`
}

type Order struct {
	ID        int32       `json:"id"`
	BuyerID   int32       `json:"buyer_id"`
	ProductID int32       `json:"product_id"`
	Quantity  int32       `json:"quantity"`
	Status    OrderStatus `json:"status"`
	CreatedAt *time.Time  `json:"created_at"`
}

type Product struct {
	ID          int32           `json:"id"`
	SupplierID  int32           `json:"supplier_id"`
	Name        string          `json:"name"`
	Description *string         `json:"description"`
	Category    string          `json:"category"`
	Price       decimal.Decimal `json:"price"`
	Stock       int32           `json:"stock"`
	CreatedAt   *time.Time      `json:"created_at"`
	Photos      []string        `json:"photos"`
}

type User struct {
	ID          int32      `json:"id"`
	Email       string     `json:"email"`
	Password    string     `json:"password"`
	CompanyName string     `json:"company_name"`
	Inn         string     `json:"inn"`
	Role        string     `json:"role"`
	CreatedAt   *time.Time `json:"created_at"`
}
