// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package sqlc

import (
	"context"
	"time"

	"github.com/shopspring/decimal"
)

const addToArchive = `-- name: AddToArchive :exec
INSERT INTO archives (user_id, product_id)
VALUES ($1, $2)
`

type AddToArchiveParams struct {
	UserID    int32 `json:"user_id"`
	ProductID int32 `json:"product_id"`
}

func (q *Queries) AddToArchive(ctx context.Context, arg AddToArchiveParams) error {
	_, err := q.db.Exec(ctx, addToArchive, arg.UserID, arg.ProductID)
	return err
}

const createOrder = `-- name: CreateOrder :exec
INSERT INTO orders (buyer_id, product_id, quantity) VALUES ($1, $2, $3)
`

type CreateOrderParams struct {
	BuyerID   int32 `json:"buyer_id"`
	ProductID int32 `json:"product_id"`
	Quantity  int32 `json:"quantity"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.Exec(ctx, createOrder, arg.BuyerID, arg.ProductID, arg.Quantity)
	return err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (supplier_id, name, description, category, price, stock, photos)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at
`

type CreateProductParams struct {
	SupplierID  int32           `json:"supplier_id"`
	Name        string          `json:"name"`
	Description *string         `json:"description"`
	Category    string          `json:"category"`
	Price       decimal.Decimal `json:"price"`
	Stock       int32           `json:"stock"`
	Photos      []string        `json:"photos"`
}

type CreateProductRow struct {
	ID        int32      `json:"id"`
	CreatedAt *time.Time `json:"created_at"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (CreateProductRow, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.SupplierID,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Price,
		arg.Stock,
		arg.Photos,
	)
	var i CreateProductRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, company_name, inn, role) VALUES ($1, $2, $3, $4, $5) RETURNING id, created_at
`

type CreateUserParams struct {
	Email       string `json:"email"`
	Password    string `json:"password"`
	CompanyName string `json:"company_name"`
	Inn         string `json:"inn"`
	Role        string `json:"role"`
}

type CreateUserRow struct {
	ID        int32      `json:"id"`
	CreatedAt *time.Time `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.CompanyName,
		arg.Inn,
		arg.Role,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const getArchivesByUserID = `-- name: GetArchivesByUserID :many
SELECT id, user_id, product_id, created_at
FROM archives
WHERE user_id = $1
`

type GetArchivesByUserIDParams struct {
	UserID int32 `json:"user_id"`
}

func (q *Queries) GetArchivesByUserID(ctx context.Context, arg GetArchivesByUserIDParams) ([]Archive, error) {
	rows, err := q.db.Query(ctx, getArchivesByUserID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Archive
	for rows.Next() {
		var i Archive
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrders = `-- name: GetOrders :many
SELECT id, buyer_id, product_id, quantity, status, created_at FROM orders
`

func (q *Queries) GetOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.BuyerID,
			&i.ProductID,
			&i.Quantity,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, supplier_id, name, description, category, price, stock, photos, created_at
FROM products
WHERE id = $1
`

type GetProductByIDParams struct {
	ID int32 `json:"id"`
}

type GetProductByIDRow struct {
	ID          int32           `json:"id"`
	SupplierID  int32           `json:"supplier_id"`
	Name        string          `json:"name"`
	Description *string         `json:"description"`
	Category    string          `json:"category"`
	Price       decimal.Decimal `json:"price"`
	Stock       int32           `json:"stock"`
	Photos      []string        `json:"photos"`
	CreatedAt   *time.Time      `json:"created_at"`
}

func (q *Queries) GetProductByID(ctx context.Context, arg GetProductByIDParams) (GetProductByIDRow, error) {
	row := q.db.QueryRow(ctx, getProductByID, arg.ID)
	var i GetProductByIDRow
	err := row.Scan(
		&i.ID,
		&i.SupplierID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Stock,
		&i.Photos,
		&i.CreatedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, supplier_id, name, description, category, price, stock, photos, created_at
FROM products
`

type GetProductsRow struct {
	ID          int32           `json:"id"`
	SupplierID  int32           `json:"supplier_id"`
	Name        string          `json:"name"`
	Description *string         `json:"description"`
	Category    string          `json:"category"`
	Price       decimal.Decimal `json:"price"`
	Stock       int32           `json:"stock"`
	Photos      []string        `json:"photos"`
	CreatedAt   *time.Time      `json:"created_at"`
}

func (q *Queries) GetProducts(ctx context.Context) ([]GetProductsRow, error) {
	rows, err := q.db.Query(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsRow
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.SupplierID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Stock,
			&i.Photos,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsWithFilters = `-- name: GetProductsWithFilters :many
SELECT id, supplier_id, name, description, category, price, stock, created_at, photos
FROM products
WHERE 
    (name ILIKE $1 OR description ILIKE $1 OR $1 IS NULL) AND
    (price >= $2 OR $2 IS NULL) AND
    (price <= $3 OR $3 IS NULL) AND
    (category = $4 OR $4 IS NULL) AND
    (stock > 0 OR $5 IS NULL OR $5 = FALSE)
`

type GetProductsWithFiltersParams struct {
	SearchQuery string          `json:"search_query"`
	PriceFrom   decimal.Decimal `json:"price_from"`
	PriceTo     decimal.Decimal `json:"price_to"`
	Category    string          `json:"category"`
	InStock     interface{}     `json:"in_stock"`
}

func (q *Queries) GetProductsWithFilters(ctx context.Context, arg GetProductsWithFiltersParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsWithFilters,
		arg.SearchQuery,
		arg.PriceFrom,
		arg.PriceTo,
		arg.Category,
		arg.InStock,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.SupplierID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Stock,
			&i.CreatedAt,
			&i.Photos,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, company_name, inn, role, created_at FROM users WHERE email = $1
`

type GetUserByEmailParams struct {
	Email string `json:"email"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CompanyName,
		&i.Inn,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const searchProductsByName = `-- name: SearchProductsByName :many
SELECT id, supplier_id, name, description, category, stock, photos, price, created_at
FROM products
WHERE name ILIKE $1
`

type SearchProductsByNameParams struct {
	Name string `json:"name"`
}

type SearchProductsByNameRow struct {
	ID          int32           `json:"id"`
	SupplierID  int32           `json:"supplier_id"`
	Name        string          `json:"name"`
	Description *string         `json:"description"`
	Category    string          `json:"category"`
	Stock       int32           `json:"stock"`
	Photos      []string        `json:"photos"`
	Price       decimal.Decimal `json:"price"`
	CreatedAt   *time.Time      `json:"created_at"`
}

func (q *Queries) SearchProductsByName(ctx context.Context, arg SearchProductsByNameParams) ([]SearchProductsByNameRow, error) {
	rows, err := q.db.Query(ctx, searchProductsByName, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchProductsByNameRow
	for rows.Next() {
		var i SearchProductsByNameRow
		if err := rows.Scan(
			&i.ID,
			&i.SupplierID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Stock,
			&i.Photos,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
